////
/// Content
/// Grid Layout
////

@import 'utils/shared/functions';

$grid-area-names: a, b, c, d, e, f, g;
$grid-rows: 5;
$grid-rows-tablet: 6;
$grid-columns: 5;
$grid-columns-tablet: 8;

.GridLayout {
  .BlockLayout--typeGrid {
    grid-template-rows: repeat($grid-rows, 1fr);
    grid-template-columns: repeat($grid-columns, 1fr);
    grid-template-areas:
      'a a a a a'
      'b b c c c'
      'd d c c c'
      'd d e e e'
      'f f f g g';

    @media screen and (min-width: get-breakpoint(tablet)) {
      grid-template-rows: repeat($grid-rows-tablet, rows(3));
      grid-template-columns: repeat($grid-columns-tablet, 1fr);
      grid-template-areas:
        'a a a a b b b b'
        'a a a a d d d d'
        'c c c c d d d d'
        'e e e e e e e e'
        'f f f g g g g g'
        'f f f g g g g g';
    }

    @media screen and (min-width: get-breakpoint(desktop)) {
      grid-template-rows: repeat($grid-rows-tablet, rows(4));
    }
  }

  @for $i from 1 through length($grid-area-names) {
    .BlockWrapper:nth-child(#{$i}) {
      grid-area: nth($grid-area-names, $i);
    }
  }
}
